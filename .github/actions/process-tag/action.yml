name: 'Process Tag'
description: 'Process version tags for releases and deployments'

inputs:
  raw_version:
    description: 'Raw version string from payload (e.g., stg-<hash> or X.Y.Z)'
    required: true
  environment:
    description: 'Environment (stg or prod)'
    required: true
  semantic_version:
    description: 'Semantic version from payload, potentially with -stg suffix (e.g., X.Y.Z or X.Y.Z-stg)'
    required: true
    default: ''
  clean_semver:
    description: 'Clean semantic version without environment suffix (e.g., X.Y.Z)'
    required: false
    default: ''

outputs:
  version:
    description: 'Processed version for Helm charts (e.g., X.Y.Z-stg or X.Y.Z)'
    value: ${{ steps.process.outputs.helm_chart_version }}
  tag_name:
    description: 'Tag name for GitHub release (e.g., vstg-X.Y.Z-<hash> or vX.Y.Z)'
    value: ${{ steps.process.outputs.tag_name }}
  git_hash:
    description: 'Git hash extracted from version (short 7-char hash or empty string)'
    value: ${{ steps.process.outputs.git_hash }}

runs:
  using: 'composite'
  steps:
    - name: Process version and tag
      id: process
      shell: bash
      run: |
        set -e
        set -o pipefail

        # --- Helper Functions ---
        log_error() { echo " Error: $1" >&2; exit 1; }
        log_info() { echo "  $1"; }
        log_success() { echo " $1"; }

        # --- Input Variables (Renamed for clarity) ---
        INPUT_PAYLOAD_VERSION="${{ inputs.raw_version }}"         # Expected: stg-<hash> (stg), X.Y.Z (prod)
        INPUT_HELM_CHART_VERSION="${{ inputs.semantic_version }}" # Expected: X.Y.Z-stg (stg), X.Y.Z (prod)
        INPUT_CLEAN_SEMVER="${{ inputs.clean_semver }}"           # Expected: X.Y.Z (clean semantic version)
        INPUT_ENVIRONMENT="${{ inputs.environment }}"             # Expected: stg or prod

        # --- Constants & Regex ---
        SEMVER_REGEX='^[0-9]+\.[0-9]+\.[0-9]+$'
        SEMVER_WITH_STG_SUFFIX_REGEX='^([0-9]+\.[0-9]+\.[0-9]+)-stg$'
        STG_HASH_REGEX='^stg-([a-f0-9]{7,40})$'

        # --- Input Variables (Renamed for clarity) ---
        INPUT_PAYLOAD_VERSION="${{ inputs.raw_version }}"         # Expected: stg-<hash> (stg), X.Y.Z (prod)
        INPUT_HELM_CHART_VERSION="${{ inputs.semantic_version }}" # Expected: X.Y.Z-stg (stg), X.Y.Z (prod)
        INPUT_ENVIRONMENT="${{ inputs.environment }}"             # Expected: stg or prod

        # Validate inputs
        if [[ -z "$INPUT_ENVIRONMENT" ]]; then
          log_error "Environment input is empty. This is required."
        fi

        if [[ -z "$INPUT_PAYLOAD_VERSION" ]]; then
          log_error "Payload Version (raw_version) input is empty. This is required."
        fi

        # --- Derived Variables ---
        CLEAN_SEMANTIC_VERSION=""
        SHORT_HASH=""
        FINAL_TAG_NAME=""

        log_info "Starting version processing..."
        log_info "- Payload Version (inputs.raw_version): '$INPUT_PAYLOAD_VERSION'"
        log_info "- Helm Chart Version (inputs.semantic_version): '$INPUT_HELM_CHART_VERSION'"
        log_info "- Clean Semantic Version (inputs.clean_semver): '$INPUT_CLEAN_SEMVER'"
        log_info "- Environment: '$INPUT_ENVIRONMENT'"

        # --- 1. Normalize Environment ---
        NORMALIZED_ENV="$INPUT_ENVIRONMENT"
        if [[ "$INPUT_ENVIRONMENT" == "staging" ]]; then
          NORMALIZED_ENV="stg"
          log_info "Normalized environment to 'stg'"
        elif [[ "$INPUT_ENVIRONMENT" == "production" ]]; then
          NORMALIZED_ENV="prod"
          log_info "Normalized environment to 'prod'"
        elif [[ "$INPUT_ENVIRONMENT" != "stg" && "$INPUT_ENVIRONMENT" != "prod" ]]; then
           log_error "Invalid environment received: '$INPUT_ENVIRONMENT'. Must be 'stg' or 'prod'."
        fi

        # --- 2. Validate and Extract Clean Semantic Version (X.Y.Z) ---
        log_info "Determining clean semantic version..."

        # First, try to use the clean_semver input if provided
        if [[ -n "$INPUT_CLEAN_SEMVER" && "$INPUT_CLEAN_SEMVER" =~ $SEMVER_REGEX ]]; then
          CLEAN_SEMANTIC_VERSION="$INPUT_CLEAN_SEMVER"
          log_success "Using provided clean semantic version: $CLEAN_SEMANTIC_VERSION"
        # Otherwise, extract from semantic_version
        elif [[ "$INPUT_HELM_CHART_VERSION" =~ $SEMVER_REGEX ]]; then
          # Input is already a clean semantic version (e.g., 1.2.3) - expected for prod
          if [[ "$NORMALIZED_ENV" != "prod" ]]; then
            log_info "Received clean semantic version '$INPUT_HELM_CHART_VERSION' but environment is '$NORMALIZED_ENV'."
          fi
          CLEAN_SEMANTIC_VERSION="$INPUT_HELM_CHART_VERSION"
          log_success "Using clean semantic version from semantic_version: $CLEAN_SEMANTIC_VERSION"
        elif [[ "$INPUT_HELM_CHART_VERSION" =~ $SEMVER_WITH_STG_SUFFIX_REGEX ]]; then
          # Input has -stg suffix (e.g., 1.2.3-stg) - expected for stg
          if [[ "$NORMALIZED_ENV" != "stg" ]]; then
            log_info "Received staging semantic version '$INPUT_HELM_CHART_VERSION' but environment is '$NORMALIZED_ENV'."
          fi
          CLEAN_SEMANTIC_VERSION="${BASH_REMATCH[1]}"
          log_success "Extracted clean semantic version from semantic_version: $CLEAN_SEMANTIC_VERSION"
        else
          log_error "Invalid semantic version format: '$INPUT_HELM_CHART_VERSION'. Expected X.Y.Z or X.Y.Z-stg."
        fi

        # --- 3. Extract Git Hash (only for staging) ---
        if [[ "$NORMALIZED_ENV" == "stg" ]]; then
          log_info "Extracting Git hash from Payload Version '$INPUT_PAYLOAD_VERSION' for staging..."
          if [[ "$INPUT_PAYLOAD_VERSION" =~ $STG_HASH_REGEX ]]; then
            # Standard format: stg-<hash>
            LONG_HASH="${BASH_REMATCH[1]}"
            SHORT_HASH="${LONG_HASH:0:7}"
            log_success "Extracted short Git hash: $SHORT_HASH"
          elif [[ "$INPUT_PAYLOAD_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-stg)?$ ]]; then
            # Handle the case where we get a semantic version instead of stg-<hash>
            # This happens when the workflow is triggered manually
            # Generate a random hash to use as a placeholder
            SHORT_HASH=$(date +%s | md5sum | head -c 7)
            log_info "No hash found in payload version. Using generated hash: $SHORT_HASH"
          else
            log_error "Invalid Payload Version format for staging: '$INPUT_PAYLOAD_VERSION'. Expected 'stg-<hash>' or 'X.Y.Z[-stg]'."
          fi
        else
           SHORT_HASH="" # Ensure hash is empty for prod
           log_info "Skipping hash extraction for prod environment."
        fi

        # --- 4. Generate Final Tag Name ---
        log_info "Generating final tag name..."
        if [[ "$NORMALIZED_ENV" == "stg" ]]; then
          # Staging tag: vstg-X.Y.Z-short_hash
          FINAL_TAG_NAME="vstg-${CLEAN_SEMANTIC_VERSION}-${SHORT_HASH}"
          log_success "Generated staging tag name: $FINAL_TAG_NAME"
        else
          # Production tag: vX.Y.Z
          FINAL_TAG_NAME="v${CLEAN_SEMANTIC_VERSION}"
          log_success "Generated production tag name: $FINAL_TAG_NAME"
        fi

        # --- 5. Set Outputs ---
        log_info "Setting action outputs..."
        echo "helm_chart_version=${INPUT_HELM_CHART_VERSION}" >> "$GITHUB_OUTPUT"
        echo "tag_name=${FINAL_TAG_NAME}" >> "$GITHUB_OUTPUT"
        echo "git_hash=${SHORT_HASH}" >> "$GITHUB_OUTPUT"

        echo "\n Outputs Set:"
        echo "  Helm Chart Version (output.version): ${INPUT_HELM_CHART_VERSION}"
        echo "  Tag Name (output.tag_name): ${FINAL_TAG_NAME}"
        echo "  Git Hash (output.git_hash): ${SHORT_HASH}"
