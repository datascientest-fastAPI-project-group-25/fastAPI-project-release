name: Process Tag

on:
  workflow_call:
    inputs:
      raw_version:
        required: true
        type: string
        description: "Raw version string from payload"
      environment:
        required: true
        type: string
        description: "Environment (stg or prod)"
      semantic_version:
        required: false
        type: string
        description: "Semantic version from payload"
    outputs:
      version:
        description: "Processed version for Helm charts"
        value: ${{ jobs.process-tag.outputs.version }}
      tag_name:
        description: "Tag name for GitHub release"
        value: ${{ jobs.process-tag.outputs.tag_name }}
      git_hash:
        description: "Git hash extracted from version"
        value: ${{ jobs.process-tag.outputs.git_hash }}
      deploy_tag:
        description: "Tag to use for deployment"
        value: ${{ jobs.process-tag.outputs.deploy_tag }}

jobs:
  process-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.process.outputs.version }}
      tag_name: ${{ steps.process.outputs.tag_name }}
      git_hash: ${{ steps.process.outputs.git_hash }}
      deploy_tag: ${{ steps.process.outputs.deploy_tag }}
    steps:
      - name: Process version and tag
        id: process
        run: |
          RAW_VERSION="${{ inputs.raw_version }}"
          PAYLOAD_SEMVER="${{ inputs.semantic_version }}"
          ENVIRONMENT="${{ inputs.environment }}"
          SEMVER_REGEX='^[0-9]+\.[0-9]+\.[0-9]+$'
          VALID_VERSION=""
          GIT_HASH="$(echo $RAW_VERSION | grep -o '[a-f0-9]\{7,40\}' || echo '')"
          
          echo "git_hash=$GIT_HASH" >> $GITHUB_OUTPUT
          
          # Process version based on environment
          if [[ "$ENVIRONMENT" == "prod" ]]; then
            echo "Processing production environment..."
            # For production, we need a strict X.Y.Z semantic version
            if [[ "$PAYLOAD_SEMVER" =~ $SEMVER_REGEX ]]; then
              echo "Using valid semantic_version from payload: $PAYLOAD_SEMVER"
              VALID_VERSION="$PAYLOAD_SEMVER"
            elif [[ "$RAW_VERSION" =~ $SEMVER_REGEX ]]; then
              echo "Using valid raw_version from payload: $RAW_VERSION"
              VALID_VERSION="$RAW_VERSION"
            else
              # Try extracting from payload_semver or raw_version
              EXTRACTED=$(echo "$PAYLOAD_SEMVER" | grep -Eo "$SEMVER_REGEX" || echo "$RAW_VERSION" | grep -Eo "$SEMVER_REGEX")
              if [[ "$EXTRACTED" =~ $SEMVER_REGEX ]]; then
                echo "Extracted valid semantic version: $EXTRACTED"
                VALID_VERSION="$EXTRACTED"
              else
                echo "::error::Production environment requires a valid X.Y.Z semantic version in 'semantic_version' or 'version' payload field."
                echo "Received semantic_version: '$PAYLOAD_SEMVER'"
                echo "Received version: '$RAW_VERSION'"
                exit 1
              fi
            fi
          elif [[ "$ENVIRONMENT" == "stg" ]]; then
            echo "Processing staging environment..."
            # For staging, use the semantic version with -stg suffix
            if [[ "$PAYLOAD_SEMVER" =~ $SEMVER_REGEX ]]; then
              echo "Using semantic_version from payload with -stg suffix: $PAYLOAD_SEMVER-stg"
              VALID_VERSION="$PAYLOAD_SEMVER-stg"
            else
              # Fallback to a default version if no valid semver is provided
              echo "::warning::No valid semantic version found in payload, using default 0.0.0-stg"
              VALID_VERSION="0.0.0-stg"
            fi
          else
            echo "::error::Unknown environment: '$ENVIRONMENT'. Must be 'stg' or 'prod'."
            exit 1
          fi
          
          # Final validation against Helm requirements
          if ! echo "$VALID_VERSION" | grep -Eq "^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$"; then
            echo "::error::Invalid final version format for Helm: '$VALID_VERSION'"
            echo "Version must match pattern: X.Y.Z or X.Y.Z-prerelease.identifier"
            exit 1
          fi
          
          echo "Final Helm version to be used: $VALID_VERSION"
          echo "version=$VALID_VERSION" >> $GITHUB_OUTPUT
          
          # Generate a short tag name for the release
          if [[ "$ENVIRONMENT" == "stg" ]]; then
            TAG_NAME="vstg-$(echo $VALID_VERSION | sed 's/\./-/g')"
            if [[ -n "$GIT_HASH" ]]; then
              # Use only first 7 characters of git hash if available
              SHORT_HASH="${GIT_HASH:0:7}"
              TAG_NAME="vstg-$SHORT_HASH"
            fi
          else
            TAG_NAME="v$VALID_VERSION"
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Process the tag for Helm values
          # For vstg-* tags, we need to extract the semantic version or use a default
          DEPLOY_TAG="$VALID_VERSION"
          if [[ "$TAG_NAME" == vstg-* ]]; then
            # For staging releases with vstg- prefix, use the semantic version if available
            # or default to a standard format
            if [[ "$TAG_NAME" =~ vstg-([0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
              # Extract semantic version from tag
              SEMVER="${BASH_REMATCH[1]}"
              DEPLOY_TAG="$SEMVER"
              echo "Extracted semantic version $SEMVER from tag $TAG_NAME"
            else
              # Use a default format with short hash if available
              SHORT_HASH=$(echo "$TAG_NAME" | sed 's/vstg-//g')
              if [[ -n "$GIT_HASH" ]]; then
                SHORT_HASH="${GIT_HASH:0:7}"
              fi
              DEPLOY_TAG="$VALID_VERSION"
              echo "Using version format: $DEPLOY_TAG"
            fi
          fi
          
          echo "deploy_tag=$DEPLOY_TAG" >> $GITHUB_OUTPUT
