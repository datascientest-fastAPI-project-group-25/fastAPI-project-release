name: App Release Trigger

on:
  repository_dispatch:
    types: [app-release]

permissions:
  contents: write
  packages: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3.5
        with:
          version: 'v3.12.0'

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Debug payload
        run: |
          echo "Received payload:"
          echo "version: '${{ github.event.client_payload.version }}'"
          echo "environment: '${{ github.event.client_payload.environment }}'"
          echo "semantic_version: '${{ github.event.client_payload.semantic_version }}'"
          echo "clean_semver: '${{ github.event.client_payload.clean_semver }}'"
          echo "backend_image: '${{ github.event.client_payload.backend_image }}'"
          echo "frontend_image: '${{ github.event.client_payload.frontend_image }}'"

      - name: Process tag using local action
        id: process-tag
        uses: ./.github/actions/process-tag
        with:
          raw_version: ${{ github.event.client_payload.version }}
          environment: ${{ github.event.client_payload.environment }}
          semantic_version: ${{ github.event.client_payload.semantic_version }}
          clean_semver: ${{ github.event.client_payload.clean_semver }}

      - name: Set outputs for backward compatibility
        id: parse
        run: |
          echo "raw_version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
          echo "environment=${{ github.event.client_payload.environment }}" >> $GITHUB_OUTPUT
          echo "version=${{ steps.process-tag.outputs.version }}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ steps.process-tag.outputs.tag_name }}" >> $GITHUB_OUTPUT
          echo "git_hash=${{ steps.process-tag.outputs.git_hash }}" >> $GITHUB_OUTPUT
          echo "deploy_tag=${{ steps.process-tag.outputs.deploy_tag }}" >> $GITHUB_OUTPUT

          echo "Using version: ${{ steps.process-tag.outputs.version }}"
          echo "Using tag name: ${{ steps.process-tag.outputs.tag_name }}"
          echo "Using git hash: ${{ steps.process-tag.outputs.git_hash }}"
          echo "Using deploy tag: ${{ steps.process-tag.outputs.deploy_tag }}"

      - name: Trigger Helm Update
        env:
          GH_TOKEN: ${{ secrets.MACHINE_USER_TOKEN }}
        run: |
          ENV="${{ steps.parse.outputs.environment }}"
          TAG="${{ steps.parse.outputs.version }}"

          # Ensure environment is not empty
          if [[ -z "$ENV" ]]; then
            echo "::warning::Environment is empty, detecting from version"
            if [[ "${{ steps.parse.outputs.raw_version }}" == stg-* || "${{ steps.parse.outputs.raw_version }}" == vstg-* ]]; then
              ENV="stg"
              echo "Detected staging environment from version prefix"
            else
              ENV="prod"
              echo "Defaulting to production environment"
            fi
          fi

          echo "Triggering Helm update for $ENV environment with tag $TAG"

          echo "Triggering update-helm workflow with tag=$TAG, env=$ENV"
          gh workflow run update-helm.yaml \
            --field tag="$TAG" \
            --field env="$ENV" \
            --ref main

          echo "âœ“ Helm update workflow triggered on main branch"

          # Wait briefly to ensure the workflow starts
          sleep 5

          # Get the run ID of the triggered workflow
          RUN_ID=$(gh run list --workflow=update-helm.yaml --json databaseId --jq '.[0].databaseId')
          if [ -n "$RUN_ID" ]; then
            echo "Update-helm workflow started with run ID: $RUN_ID"
            echo "Monitor at: https://github.com/$GITHUB_REPOSITORY/actions/runs/$RUN_ID"
          else
            echo "::warning::Could not find the triggered workflow run ID"
          fi

          echo "backend_image=${{ github.event.client_payload.backend_image }}" >> $GITHUB_OUTPUT
          echo "frontend_image=${{ github.event.client_payload.frontend_image }}" >> $GITHUB_OUTPUT

      - name: Package Helm charts
        run: |
          # Create dist directories
          mkdir -p dist/fastapi-dev dist/fastapi-staging dist/fastapi-prod

          # First, update the values files with the correct image tags
          # For dev environment
          yq e '.backend.tag = "${{ steps.parse.outputs.version }}-stg"' -i config/helm/dev.yaml
          yq e '.frontend.tag = "${{ steps.parse.outputs.version }}-stg"' -i config/helm/dev.yaml

          # For staging environment
          yq e '.backend.tag = "${{ steps.parse.outputs.version }}-stg"' -i config/helm/staging.yaml
          yq e '.frontend.tag = "${{ steps.parse.outputs.version }}-stg"' -i config/helm/staging.yaml

          # For production environment
          yq e '.backend.tag = "${{ steps.parse.outputs.version }}"' -i config/helm/production.yaml
          yq e '.frontend.tag = "${{ steps.parse.outputs.version }}"' -i config/helm/production.yaml

          # Package dev chart
          helm package charts/fastapi \
            --version ${{ steps.parse.outputs.version }} \
            --app-version "${{ steps.parse.outputs.version }}-stg" \
            -d dist/fastapi-dev

          # Package staging chart
          helm package charts/fastapi \
            --version ${{ steps.parse.outputs.version }} \
            --app-version "${{ steps.parse.outputs.version }}-stg" \
            -d dist/fastapi-staging

          # Package prod chart
          helm package charts/fastapi \
            --version ${{ steps.parse.outputs.version }} \
            --app-version "${{ steps.parse.outputs.version }}" \
            -d dist/fastapi-prod

      - name: Check if charts were packaged
        id: check_charts
        run: |
          # Check if any charts were packaged
          DEV_CHARTS=$(find dist/fastapi-dev -name "*.tgz" 2>/dev/null | wc -l)
          STAGING_CHARTS=$(find dist/fastapi-staging -name "*.tgz" 2>/dev/null | wc -l)
          PROD_CHARTS=$(find dist/fastapi-prod -name "*.tgz" 2>/dev/null | wc -l)

          echo "Found $DEV_CHARTS charts in dev, $STAGING_CHARTS in staging, $PROD_CHARTS in prod"

          TOTAL_CHARTS=$((DEV_CHARTS + STAGING_CHARTS + PROD_CHARTS))
          if [ "$TOTAL_CHARTS" -eq 0 ]; then
            echo "No charts were packaged. This might indicate an issue with the Helm package commands."
            echo "charts_exist=false" >> $GITHUB_OUTPUT
          else
            echo "Found $TOTAL_CHARTS charts in total."
            echo "charts_exist=true" >> $GITHUB_OUTPUT
          fi

      - name: Handle Git Tag
        if: steps.check_charts.outputs.charts_exist == 'true'
        id: create_tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          TAG_NAME="${{ steps.parse.outputs.tag_name }}"
          echo "Handling git tag: $TAG_NAME"

          # Check if tag exists remotely
          if git ls-remote --tags origin | grep -q "$TAG_NAME"; then
            echo "Tag $TAG_NAME already exists in remote repository"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "tag_verified=true" >> $GITHUB_OUTPUT
          else
            # Check if tag exists locally
            if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
              echo "Tag $TAG_NAME exists locally but not remotely, deleting and recreating"
              git tag -d "$TAG_NAME"
            fi

            # Create and push tag
            echo "Creating new tag: $TAG_NAME"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"

            if git push origin "$TAG_NAME"; then
              echo "Successfully created and pushed tag: $TAG_NAME"
              echo "tag_exists=true" >> $GITHUB_OUTPUT
              echo "tag_verified=true" >> $GITHUB_OUTPUT

              # Add a small delay to ensure the tag is available for the release
              echo "Waiting for tag to be available..."
              sleep 5
            else
              echo "::error::Failed to push tag $TAG_NAME to remote repository"
              echo "tag_exists=false" >> $GITHUB_OUTPUT
              echo "tag_verified=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Create GitHub Release
        if: steps.check_charts.outputs.charts_exist == 'true' && steps.create_tag.outputs.tag_verified == 'true'
        run: |
          # Use gh CLI to create a release
          echo "Creating GitHub release for tag ${{ steps.parse.outputs.tag_name }}..."

          # Install GitHub CLI if not already installed
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi

          # Authenticate with GitHub CLI
          echo "${{ secrets.MACHINE_USER_TOKEN }}" | gh auth login --with-token

          # Create release notes file
          cat > release_notes.md << EOF
          ## Environment-specific Helm Charts

          This release includes Helm charts for the following environments:
          - Development (using staging images)
          - Staging
          - Production

          ### Version Information
          - Semantic Version for Helm: ${{ steps.parse.outputs.version }}
          - Environment: ${{ steps.parse.outputs.environment }}
          - Original Version: ${{ steps.parse.outputs.raw_version }}
          - Git Hash: ${{ steps.parse.outputs.git_hash }}

          ### Image Tags
          - Dev/Staging: ${{ steps.parse.outputs.version }}-stg
          - Production: ${{ steps.parse.outputs.version }}
          EOF

          # Check if release already exists
          if gh release view "${{ steps.parse.outputs.tag_name }}" &>/dev/null; then
            echo "Release ${{ steps.parse.outputs.tag_name }} already exists, updating it..."
            # Update existing release
            gh release edit "${{ steps.parse.outputs.tag_name }}" \
              --title "Release ${{ steps.parse.outputs.tag_name }}" \
              --notes-file release_notes.md \
              ${{ github.event.client_payload.environment == 'stg' && '--prerelease' || '' }}

            # Upload assets if they don't already exist
            for chart in dist/fastapi-dev/*.tgz dist/fastapi-staging/*.tgz dist/fastapi-prod/*.tgz; do
              filename=$(basename "$chart")
              if ! gh release view "${{ steps.parse.outputs.tag_name }}" | grep -q "$filename"; then
                echo "Uploading $filename to release..."
                if gh release upload "${{ steps.parse.outputs.tag_name }}" "$chart" --clobber; then
                  echo "Successfully uploaded $filename"
                else
                  echo "::warning::Failed to upload $filename, but continuing with other assets"
                fi
              else
                echo "$filename already exists in release, skipping upload"
              fi
            done

            echo "âœ… GitHub release updated successfully!"
          else
            # Create new release without assets first
            if gh release create "${{ steps.parse.outputs.tag_name }}" \
              --title "Release ${{ steps.parse.outputs.tag_name }}" \
              --notes-file release_notes.md \
              --generate-notes \
              ${{ github.event.client_payload.environment == 'stg' && '--prerelease' || '' }}; then

              echo "Release created successfully, now uploading assets..."

              # Upload assets separately
              for chart in dist/fastapi-dev/*.tgz dist/fastapi-staging/*.tgz dist/fastapi-prod/*.tgz; do
                filename=$(basename "$chart")
                echo "Uploading $filename to release..."
                if gh release upload "${{ steps.parse.outputs.tag_name }}" "$chart" --clobber; then
                  echo "Successfully uploaded $filename"
                else
                  echo "::warning::Failed to upload $filename, but continuing with other assets"
                fi
              done

              echo "âœ… GitHub release created successfully!"
            else
              echo "::warning::Failed to create release, but continuing workflow"
            fi
          fi


      - name: Debug Release Creation
        if: steps.check_charts.outputs.charts_exist == 'true'
        run: |
          echo "A new GitHub release was created with tag ${{ steps.parse.outputs.tag_name }}"
          echo "Using semantic version ${{ steps.parse.outputs.version }} for Helm charts"
          echo "This should trigger the update-helm.yaml workflow via the release: [published] event"
          echo "If update-helm.yaml doesn't run, check if the release was actually published (not a draft)"
          echo "Staging releases are marked as pre-releases: ${{ github.event.client_payload.environment == 'stg' }}"
