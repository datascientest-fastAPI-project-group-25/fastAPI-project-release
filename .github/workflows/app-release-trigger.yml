name: App Release Trigger

on:
  repository_dispatch:
    types: [app-release]

permissions:
  contents: write
  packages: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Debug payload
        run: |
          echo "::group::Received Payload"
          echo "version: '${{ github.event.client_payload.version }}'"
          echo "environment: '${{ github.event.client_payload.environment }}'"
          echo "semantic_version: '${{ github.event.client_payload.semantic_version }}'"
          echo "clean_semver: '${{ github.event.client_payload.clean_semver }}'"
          echo "sha: '${{ github.event.client_payload.sha }}'"
          echo "backend_image: '${{ github.event.client_payload.backend_image }}'"
          echo "frontend_image: '${{ github.event.client_payload.frontend_image }}'"
          echo "::endgroup::"

          # Validate that all required fields are present
          echo "::group::Payload Validation"
          MISSING_FIELDS=""
          [ -z "${{ github.event.client_payload.version }}" ] && MISSING_FIELDS="${MISSING_FIELDS}version "
          [ -z "${{ github.event.client_payload.environment }}" ] && MISSING_FIELDS="${MISSING_FIELDS}environment "
          [ -z "${{ github.event.client_payload.semantic_version }}" ] && MISSING_FIELDS="${MISSING_FIELDS}semantic_version "
          [ -z "${{ github.event.client_payload.clean_semver }}" ] && MISSING_FIELDS="${MISSING_FIELDS}clean_semver "
          [ -z "${{ github.event.client_payload.sha }}" ] && MISSING_FIELDS="${MISSING_FIELDS}sha "

          if [ -n "$MISSING_FIELDS" ]; then
            echo "::error::Missing required fields in payload: $MISSING_FIELDS"
            exit 1
          else
            echo "All required fields are present in the payload."
          fi
          echo "::endgroup::"

      - name: Validate payload
        run: |
          # Validate environment
          ENV="${{ github.event.client_payload.environment }}"
          if [[ -z "$ENV" ]]; then
            echo "::error::Environment is empty in payload"
            exit 1
          fi

          if [[ "$ENV" != "stg" && "$ENV" != "prod" ]]; then
            echo "::error::Invalid environment: '$ENV'. Must be 'stg' or 'prod'."
            exit 1
          fi

          # Validate version based on environment
          VERSION="${{ github.event.client_payload.version }}"
          if [[ -z "$VERSION" ]]; then
            echo "::error::Version is empty in payload"
            exit 1
          fi

          # For prod, expect clean SemVer (X.Y.Z)
          if [[ "$ENV" == "prod" ]]; then
            if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "::error::Invalid version format for prod: '$VERSION'. Expected X.Y.Z format."
              exit 1
            fi
          fi

          # For stg, allow SemVer with suffix or stg-<hash>
          if [[ "$ENV" == "stg" ]]; then
            if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-stg)?$ ]] && ! [[ "$VERSION" =~ ^stg-[a-f0-9]+$ ]]; then
              echo "::error::Invalid version format for stg: '$VERSION'. Expected X.Y.Z[-stg] or stg-<hash> format."
              exit 1
            fi
          fi

          echo "Payload validation successful"

      - name: Prepare tag inputs
        id: prepare-inputs
        run: |
          # Set default values for optional inputs
          VERSION="${{ github.event.client_payload.version }}"
          ENV="${{ github.event.client_payload.environment }}"
          SEMANTIC_VERSION="${{ github.event.client_payload.semantic_version }}"
          CLEAN_SEMVER="${{ github.event.client_payload.clean_semver }}"
          SHA="${{ github.event.client_payload.sha }}"
          
          echo "::group::Input Validation and Defaults"
          echo "Raw version: $VERSION"
          echo "Environment: $ENV"
          echo "Semantic version from payload: $SEMANTIC_VERSION"
          echo "Clean semver from payload: $CLEAN_SEMVER"
          echo "SHA from payload: $SHA"
          
          # Derive semantic_version if missing
          if [[ -z "$SEMANTIC_VERSION" ]]; then
            if [[ "$ENV" == "stg" ]]; then
              # For staging, if version is stg-<hash>, use a default semantic version with -stg suffix
              if [[ "$VERSION" =~ ^stg-([a-f0-9]+)$ ]]; then
                # Use a default semantic version with -stg suffix if not provided
                SEMANTIC_VERSION="0.1.0-stg"
                echo "Derived staging semantic version: $SEMANTIC_VERSION"
              elif [[ "$VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
                # If version is already semantic, add -stg suffix
                SEMANTIC_VERSION="${BASH_REMATCH[1]}-stg"
                echo "Derived staging semantic version from raw version: $SEMANTIC_VERSION"
              fi
            elif [[ "$ENV" == "prod" ]]; then
              # For prod, if version is semantic, use it directly
              if [[ "$VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
                SEMANTIC_VERSION="$VERSION"
                echo "Using raw version as semantic version for prod: $SEMANTIC_VERSION"
              fi
            fi
          fi
          
          # Derive clean_semver if missing
          if [[ -z "$CLEAN_SEMVER" ]]; then
            if [[ "$SEMANTIC_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)(-stg)?$ ]]; then
              CLEAN_SEMVER="${BASH_REMATCH[1]}"
              echo "Derived clean semantic version: $CLEAN_SEMVER"
            elif [[ "$VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
              CLEAN_SEMVER="$VERSION"
              echo "Using raw version as clean semantic version: $CLEAN_SEMVER"
            fi
          fi
          
          # Set outputs
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "semantic_version=$SEMANTIC_VERSION" >> $GITHUB_OUTPUT
          echo "clean_semver=$CLEAN_SEMVER" >> $GITHUB_OUTPUT
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          
          # Final validation
          if [[ -z "$VERSION" || -z "$ENV" ]]; then
            echo "::error::Required inputs are still missing after preparation: version=$VERSION, environment=$ENV"
            exit 1
          fi
          
          echo "âœ… Inputs prepared successfully"

      - name: Process tag using local action
        id: process-tag
        uses: ./.github/actions/process-tag
        with:
          raw_version: ${{ steps.prepare-inputs.outputs.version }}
          environment: ${{ steps.prepare-inputs.outputs.environment }}
          semantic_version: ${{ steps.prepare-inputs.outputs.semantic_version }}
          clean_semver: ${{ steps.prepare-inputs.outputs.clean_semver }}
          sha: ${{ steps.prepare-inputs.outputs.sha }}

      - name: Set outputs for backward compatibility
        id: parse
        run: |
          echo "raw_version=${{ steps.prepare-inputs.outputs.version }}" >> $GITHUB_OUTPUT
          echo "environment=${{ steps.prepare-inputs.outputs.environment }}" >> $GITHUB_OUTPUT
          echo "version=${{ steps.process-tag.outputs.version }}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ steps.process-tag.outputs.tag_name }}" >> $GITHUB_OUTPUT
          echo "git_hash=${{ steps.process-tag.outputs.git_hash }}" >> $GITHUB_OUTPUT
          echo "deploy_tag=${{ steps.process-tag.outputs.deploy_tag || steps.process-tag.outputs.version }}" >> $GITHUB_OUTPUT

          echo "Using version: ${{ steps.process-tag.outputs.version }}"
          echo "Using tag name: ${{ steps.process-tag.outputs.tag_name }}"
          echo "Using git hash: ${{ steps.process-tag.outputs.git_hash }}"
          echo "Using deploy tag: ${{ steps.process-tag.outputs.deploy_tag }}"

      - name: Handle Git Tag
        # This step now runs unconditionally after tag processing
        id: create_tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          TAG_NAME="${{ steps.parse.outputs.tag_name }}"
          echo "Handling git tag: $TAG_NAME"

          # Check if tag exists remotely
          if git ls-remote --tags origin | grep -q "$TAG_NAME"; then
            echo "Tag $TAG_NAME already exists in remote repository"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "tag_verified=true" >> $GITHUB_OUTPUT
          else
            # Check if tag exists locally
            if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
              echo "Tag $TAG_NAME exists locally but not remotely, deleting and recreating"
              git tag -d "$TAG_NAME"
            fi

            # Create and push tag
            echo "Creating new tag: $TAG_NAME"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"

            if git push origin "$TAG_NAME"; then
              echo "Successfully created and pushed tag: $TAG_NAME"
              echo "tag_exists=true" >> $GITHUB_OUTPUT
              echo "tag_verified=true" >> $GITHUB_OUTPUT

              # Add a small delay to ensure the tag is available for the release
              echo "Waiting for tag to be available..."
              sleep 5
            else
              echo "::error::Failed to push tag $TAG_NAME to remote repository"
              echo "tag_exists=false" >> $GITHUB_OUTPUT
              echo "tag_verified=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Create GitHub Release
        # Run if the tag was successfully created or already existed
        if: steps.create_tag.outputs.tag_verified == 'true'
        id: create_release
        run: |
          # Use gh CLI to create a release
          echo "Creating GitHub release for tag ${{ steps.parse.outputs.tag_name }}..."

          # Install GitHub CLI if not already installed
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          fi

          # Authenticate with GitHub CLI
          echo "${{ secrets.MACHINE_USER_TOKEN }}" | gh auth login --with-token

          # Create release notes file
          cat > release_notes.md << EOF
          ## Release Triggered

          This release was triggered for the **${{ steps.parse.outputs.environment }}** environment.

          ### Version Information
          - Release Tag: ${{ steps.parse.outputs.tag_name }}
          - Environment: ${{ steps.parse.outputs.environment }}
          - Original Version Sent: ${{ steps.parse.outputs.raw_version }}
          - Associated Git Hash: ${{ steps.parse.outputs.git_hash }}

          This release event will trigger the `update-helm.yaml` workflow to update the corresponding Helm values.
          EOF

          # Check if release already exists
          RELEASE_EXISTS="false"
          RELEASE_ID=""
          if gh release view "${{ steps.parse.outputs.tag_name }}" --json id &>/dev/null; then
            RELEASE_EXISTS="true"
            RELEASE_ID=$(gh release view "${{ steps.parse.outputs.tag_name }}" --json id --jq '.id')
            echo "Release ${{ steps.parse.outputs.tag_name }} already exists (ID: $RELEASE_ID), updating it..."

            # Update existing release
            gh release edit "${{ steps.parse.outputs.tag_name }}" \
              --title "Release ${{ steps.parse.outputs.tag_name }}" \
              --notes-file release_notes.md \
              ${{ github.event.client_payload.environment == 'stg' && '--prerelease' || '' }}

            echo "âœ… GitHub release updated successfully!"
            echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            # Create new release without assets first
            if gh release create "${{ steps.parse.outputs.tag_name }}" \
              --title "Release ${{ steps.parse.outputs.tag_name }}" \
              --notes-file release_notes.md \
              --generate-notes \
              --verify-tag \
              --latest \
              ${{ github.event.client_payload.environment == 'stg' && '--prerelease' || '' }}; then

              # Get the release ID
              RELEASE_ID=$(gh release view "${{ steps.parse.outputs.tag_name }}" --json id --jq '.id')
              echo "âœ… GitHub release created successfully! (ID: $RELEASE_ID)"
              echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
              echo "release_exists=true" >> $GITHUB_OUTPUT
            else
              echo "::error::Failed to create release"
              echo "release_exists=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi


      - name: Debug Release Creation
        # Run if the tag was successfully created or already existed
        if: steps.create_tag.outputs.tag_verified == 'true'
        run: |
          echo "::group::Release Information"
          echo "A GitHub release was created/updated with tag ${{ steps.parse.outputs.tag_name }}"
          echo "Release ID: ${{ steps.create_release.outputs.release_id }}"
          echo "Environment: ${{ steps.parse.outputs.environment }}"
          echo "Release exists: ${{ steps.create_release.outputs.release_exists }}"
          echo "::endgroup::"

          echo "::group::Next Steps"
          echo "This should trigger the update-helm.yaml workflow via the release: [published] event."
          echo "If update-helm.yaml doesn't run, check if the release was actually published (not a draft)."
          echo "Staging releases are marked as pre-releases: ${{ steps.parse.outputs.environment == 'stg' }}"
          echo "::endgroup::"

          # Verify the release is published and visible
          echo "::group::Release Verification"
          if ! command -v gh &> /dev/null; then
            echo "GitHub CLI not available for verification."
          else
            echo "Verifying release is published..."
            RELEASE_INFO=$(gh release view "${{ steps.parse.outputs.tag_name }}" --json name,tagName,isDraft,isPrerelease,isLatest,publishedAt 2>/dev/null || echo '{}')

            if [ "$RELEASE_INFO" != "{}" ]; then
              echo "Release details:"
              echo "$RELEASE_INFO" | jq .

              IS_DRAFT=$(echo "$RELEASE_INFO" | jq -r '.isDraft')
              if [ "$IS_DRAFT" == "true" ]; then
                echo "::warning::Release is still in draft state. This will not trigger the update-helm.yaml workflow."
              else
                echo "âœ… Release is published (not a draft). This should trigger the update-helm.yaml workflow."
              fi
            else
              echo "::warning::Could not retrieve release information."
            fi
          fi
          echo "::endgroup::"
