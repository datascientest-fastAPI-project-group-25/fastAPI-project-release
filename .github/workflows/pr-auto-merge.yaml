name: Auto-Merge Helm Update PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'config/helm/values-*.yaml'  # Only trigger on changes to Helm values files

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    # Only run on PRs created by the GitHub Actions bot
    if: github.actor == 'github-actions[bot]' || github.actor == 'DatascientestMachineUser'
    env:
      GH_TOKEN: ${{ secrets.MACHINE_USER_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MACHINE_USER_TOKEN }}
          fetch-depth: 0

      - name: Wait for PR to be ready
        id: wait_for_pr
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "Waiting for PR #${PR_NUMBER} to be ready..."
          
          # Wait for a longer time initially to allow GitHub to process the PR
          echo "Initial wait of 30 seconds..."
          sleep 30
          
          # Get PR details
          PR_DETAILS=$(gh pr view $PR_NUMBER --json number,title,headRefName,baseRefName,state)
          echo "PR details: $PR_DETAILS"
          
          # Check if PR is open
          PR_STATE=$(echo "$PR_DETAILS" | jq -r '.state')
          if [[ "$PR_STATE" != "OPEN" ]]; then
            echo "::warning::PR #${PR_NUMBER} is not open (state: $PR_STATE). Cannot merge."
            echo "can_merge=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "PR #${PR_NUMBER} is ready for merging."
          echo "can_merge=true" >> $GITHUB_OUTPUT

      - name: Check for required checks
        id: check_required
        if: steps.wait_for_pr.outputs.can_merge == 'true'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "Checking for required checks on PR #${PR_NUMBER}..."
          
          # Check if there are any required checks (redirect stderr to avoid error when no checks)
          REQUIRED_CHECKS=$(gh pr checks $PR_NUMBER --required --json name --jq 'length' 2>/dev/null || echo "0")
          echo "required_checks=$REQUIRED_CHECKS" >> $GITHUB_OUTPUT
          
          if [[ "$REQUIRED_CHECKS" == "0" ]]; then
            echo "No required checks found for PR #${PR_NUMBER}. Will proceed with merge immediately."
          else
            echo "Found $REQUIRED_CHECKS required checks for PR #${PR_NUMBER}. Will wait for them to complete."
          fi

      - name: Wait for required checks
        if: steps.wait_for_pr.outputs.can_merge == 'true' && steps.check_required.outputs.required_checks != '0'
        id: wait_for_checks
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "Waiting for checks on PR #${PR_NUMBER}..."
          
          # Try up to 3 times with increasing delays
          for i in {1..3}; do
            echo "Attempt $i to check PR status..."
            
            # Try to wait for checks
            if gh pr checks $PR_NUMBER --watch --required --interval 30; then
              echo "All required checks passed for PR #${PR_NUMBER}."
              break
            else
              echo "Checks not yet complete on attempt $i."
              if [[ $i -lt 3 ]]; then
                SLEEP_TIME=$((30 * i))
                echo "Waiting ${SLEEP_TIME} seconds before next attempt..."
                sleep $SLEEP_TIME
              else
                echo "::warning::Required checks still not passing after 3 attempts. Will try to merge anyway."
              fi
            fi
          done

      - name: Force Merge PR
        if: steps.wait_for_pr.outputs.can_merge == 'true'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "Attempting to merge PR #${PR_NUMBER}..."
          
          # Try to merge the PR with admin privileges
          if gh pr merge $PR_NUMBER --squash --admin --delete-branch; then
            echo "PR #${PR_NUMBER} merged successfully."
          else
            echo "::warning::Failed to merge PR #${PR_NUMBER} with admin privileges."
            
            # Try alternative approach - merge directly with Git
            echo "Trying alternative merge approach..."
            
            # Get PR details
            PR_HEAD=$(gh pr view $PR_NUMBER --json headRefName --jq '.headRefName')
            PR_BASE=$(gh pr view $PR_NUMBER --json baseRefName --jq '.baseRefName')
            
            echo "PR head branch: $PR_HEAD"
            echo "PR base branch: $PR_BASE"
            
            # Configure Git
            git config --global user.name "DatascientestMachineUser"
            git config --global user.email "datascientest.machine.user@gmail.com"
            
            # Fetch the latest changes
            git fetch origin $PR_HEAD
            git fetch origin $PR_BASE
            
            # Checkout the base branch
            git checkout $PR_BASE
            
            # Merge the head branch
            if git merge --squash origin/$PR_HEAD; then
              # Commit the changes
              git commit -m "Merge PR #${PR_NUMBER}: $(gh pr view $PR_NUMBER --json title --jq '.title')"
              
              # Push the changes
              if git push origin $PR_BASE; then
                echo "PR #${PR_NUMBER} merged successfully using Git."
                
                # Close the PR
                gh pr close $PR_NUMBER --comment "Merged manually via workflow."
                
                # Delete the head branch
                git push origin --delete $PR_HEAD || echo "Could not delete branch $PR_HEAD"
              else
                echo "::error::Failed to push changes to $PR_BASE."
              fi
            else
              echo "::error::Failed to merge PR #${PR_NUMBER} using Git."
            fi
          fi
