name: Update Helm Image Tag

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag to deploy'
        required: true
        type: string
      env:
        description: 'Deployment environment (dev, staging, production)'
        required: true
        default: production
        type: string
  release:
    types: [published]
    # Only trigger on published releases to avoid duplicate runs

jobs:
  update-helm:
    runs-on: ubuntu-latest
    env:
      GIT_AUTHOR_NAME: github-actions
      GIT_AUTHOR_EMAIL: github-actions@github.com
      GIT_COMMITTER_NAME: github-actions
      GIT_COMMITTER_EMAIL: github-actions@github.com
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MACHINE_USER_TOKEN }}
          fetch-depth: 0  # Fetch all history for proper branch detection

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Debug Event Information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "Release tag: ${{ github.event.release.tag_name }}"
            echo "Release name: ${{ github.event.release.name }}"
            echo "Release draft: ${{ github.event.release.draft }}"
            echo "Release prerelease: ${{ github.event.release.prerelease }}"
          else
            echo "Workflow dispatch inputs:"
            echo "  Tag: ${{ github.event.inputs.tag }}"
            echo "  Environment: ${{ github.event.inputs.env }}"
          fi

      - name: Determine tag and environment
        id: vars
        run: |
          # Determine tag and environment
          if [ "${{ github.event_name }}" = "release" ]; then
            # Check if this is a duplicate run (same release, different event)
            EVENT_TYPE="${{ github.event.action }}"
            RAW_TAG="${{ github.event.release.tag_name }}"

            # We're now only handling published events, so no need to skip any events
            echo "Processing published event for tag $RAW_TAG"

            # For releases, determine environment based on tag format
            if [[ "$RAW_TAG" == v* && "$RAW_TAG" != vstg-* ]]; then
              ENV="prod"
              # Extract semantic version from tag (remove 'v' prefix)
              SEMANTIC_VERSION="${RAW_TAG#v}"
              # Use the tag as the raw version (for production, this is the same as the semantic version)
              RAW_VERSION="$SEMANTIC_VERSION"
            else
              ENV="stg"
              # For vstg tags, extract both the semantic version and git hash
              # Format is typically vstg-X.Y.Z-hash
              if [[ "$RAW_TAG" =~ vstg-([0-9]+\.[0-9]+\.[0-9]+)-([a-f0-9]+) ]]; then
                SEMANTIC_VERSION="${BASH_REMATCH[1]}-stg"
                RAW_VERSION="stg-${BASH_REMATCH[2]}"
              else
                echo "::warning::Could not parse semantic version from tag $RAW_TAG"
                # Fallback to using the tag as is
                SEMANTIC_VERSION=""
                RAW_VERSION="$RAW_TAG"
              fi
            fi

            echo "Triggered by release '$EVENT_TYPE' event for tag $RAW_TAG"
            echo "Extracted environment: $ENV"
            echo "Extracted semantic version: $SEMANTIC_VERSION"
            echo "Extracted raw version: $RAW_VERSION"
          else
            # For workflow_dispatch, use the inputs directly
            RAW_VERSION="${{ github.event.inputs.tag }}"
            ENV="${{ github.event.inputs.env }}"

            # Normalize environment
            if [[ "$ENV" == "production" ]]; then
              ENV="prod"
            elif [[ "$ENV" == "staging" ]]; then
              ENV="stg"
            fi

            # Validate tag is not empty
            if [[ -z "$RAW_VERSION" ]]; then
              echo "::error::Tag input is empty. This is required."
              exit 1
            fi

            # Derive semantic version from raw version if possible
            if [[ "$RAW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # Clean semantic version (e.g., 1.2.3)
              SEMANTIC_VERSION="$RAW_VERSION"
              if [[ "$ENV" == "stg" ]]; then
                SEMANTIC_VERSION="${SEMANTIC_VERSION}-stg"
              fi
            elif [[ "$RAW_VERSION" =~ ^stg-([a-f0-9]+)$ ]]; then
              # Staging hash format
              SEMANTIC_VERSION=""
            else
              # Try to extract semantic version from the raw version
              if [[ "$RAW_VERSION" =~ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
                SEMANTIC_VERSION="${BASH_REMATCH[1]}"
                if [[ "$ENV" == "stg" ]]; then
                  SEMANTIC_VERSION="${SEMANTIC_VERSION}-stg"
                fi
              else
                echo "::warning::Could not extract semantic version from $RAW_VERSION"
                SEMANTIC_VERSION=""
              fi
            fi

            # Override environment based on tag format for consistency
            if [[ "$RAW_VERSION" == vstg-* ]]; then
              # This is a staging tag with semantic version
              ENV="stg"
              echo "Detected vstg- prefix, setting environment to staging"
            elif [[ "$RAW_VERSION" == stg-* ]]; then
              # This is a regular staging tag
              ENV="stg"
              echo "Detected stg- prefix, setting environment to staging"
            elif [[ "$RAW_VERSION" == v* ]]; then
              # This is a production tag
              ENV="prod"
              echo "Detected v prefix, setting environment to production"
            fi
            echo "Triggered by workflow_dispatch with tag=$RAW_VERSION, env=$ENV"

          # Set outputs
          echo "tag=$RAW_VERSION" >> $GITHUB_OUTPUT
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "raw_version=$RAW_VERSION" >> $GITHUB_OUTPUT
          echo "semantic_version=$SEMANTIC_VERSION" >> $GITHUB_OUTPUT

          # Print determined values for debugging
          echo "Using tag: $RAW_VERSION"
          echo "Using environment: $ENV"
          echo "Using semantic version: $SEMANTIC_VERSION"
          fi

      - name: Process tag using local action
        id: process-tag
        uses: ./.github/actions/process-tag
        with:
          raw_version: ${{ steps.vars.outputs.raw_version }}
          environment: ${{ steps.vars.outputs.env }}
          semantic_version: ${{ steps.vars.outputs.semantic_version }}



      - name: Update Helm values with new image tag
        id: update_helm
        run: |
          echo "::group::Environment and Tag Information"
          echo "Raw Version: ${{ steps.vars.outputs.raw_version }}"
          echo "Semantic Version: ${{ steps.vars.outputs.semantic_version }}"
          echo "Environment: ${{ steps.vars.outputs.env }}"
          echo "Processed Version: ${{ steps.process-tag.outputs.version }}"
          echo "Processed Tag Name: ${{ steps.process-tag.outputs.tag_name }}"
          echo "Processed Git Hash: ${{ steps.process-tag.outputs.git_hash }}"
          echo "::endgroup::"

          # Normalize environment for file paths
          if [[ "${{ steps.vars.outputs.env }}" == "prod" ]]; then
            ENV_DIR="production"
          elif [[ "${{ steps.vars.outputs.env }}" == "stg" ]]; then
            ENV_DIR="staging"
          else
            echo "::error::Unsupported environment: ${{ steps.vars.outputs.env }}"
            exit 1
          fi

          VALUES_FILE="config/helm/$ENV_DIR.yaml"
          if [ ! -f "$VALUES_FILE" ]; then
            echo "::error::Values file $VALUES_FILE does not exist"
            echo "Available files in config/helm/:"
            ls -la config/helm/
            exit 1
          fi
          echo "✅ Values file exists: $VALUES_FILE"
          echo "::endgroup::"

          echo "::group::Current Tag Values"
          CURRENT_BACKEND_TAG=$(yq e '.backend.tag' "$VALUES_FILE" || echo "ERROR")
          CURRENT_FRONTEND_TAG=$(yq e '.frontend.tag' "$VALUES_FILE" || echo "ERROR")

          if [[ "$CURRENT_BACKEND_TAG" == "ERROR" || "$CURRENT_FRONTEND_TAG" == "ERROR" ]]; then
            echo "::error::Failed to read current tag values"
            exit 1
          fi

          echo "Current backend tag: $CURRENT_BACKEND_TAG"
          echo "Current frontend tag: $CURRENT_FRONTEND_TAG"
          echo "::endgroup::"

          echo "::group::Updating Image Tags"
          DEPLOY_TAG="${{ steps.process-tag.outputs.deploy_tag }}"
          ENV="${{ steps.vars.outputs.env }}"

          # Pass the FILE_ENV to the Makefile
          echo "Using deploy tag: $DEPLOY_TAG for environment: $ENV (file: $FILE_ENV)"

          # Update the values file directly using yq instead of using the Makefile
          echo "Updating backend tag to $DEPLOY_TAG in $VALUES_FILE"
          yq e -i ".backend.tag = \"$DEPLOY_TAG\"" "$VALUES_FILE"

          echo "Updating frontend tag to $DEPLOY_TAG in $VALUES_FILE"
          yq e -i ".frontend.tag = \"$DEPLOY_TAG\"" "$VALUES_FILE"

          echo "::endgroup::"

          echo "::group::Verification"
          NEW_BACKEND_TAG=$(yq e '.backend.tag' "$VALUES_FILE")
          NEW_FRONTEND_TAG=$(yq e '.frontend.tag' "$VALUES_FILE")

          if [[ "$NEW_BACKEND_TAG" != "$DEPLOY_TAG" || "$NEW_FRONTEND_TAG" != "$DEPLOY_TAG" ]]; then
            echo "::error::Tag verification failed!"
            echo "Expected: $DEPLOY_TAG"
            echo "Got: backend=$NEW_BACKEND_TAG, frontend=$NEW_FRONTEND_TAG"
            exit 1
          fi

          echo "✅ Tags successfully updated and verified"
          echo "Backend: $NEW_BACKEND_TAG"
          echo "Frontend: $NEW_FRONTEND_TAG"
          echo "::endgroup::"

          # Set outputs for use in later steps
          echo "updated=true" >> $GITHUB_OUTPUT
          echo "old_backend_tag=$CURRENT_BACKEND_TAG" >> $GITHUB_OUTPUT
          echo "old_frontend_tag=$CURRENT_FRONTEND_TAG" >> $GITHUB_OUTPUT
          echo "deploy_tag=$DEPLOY_TAG" >> $GITHUB_OUTPUT

      - name: Commit changes
        id: commit
        if: steps.update_helm.outputs.updated == 'true'
        run: |
          echo "::group::Git Configuration"
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          echo "::endgroup::"

          DEFAULT_BRANCH="main"
          echo "Default branch: $DEFAULT_BRANCH"

          echo "::group::Branch Creation"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          TAG_SAFE=$(echo "${{ steps.vars.outputs.tag }}" | sed 's/[^a-zA-Z0-9]/-/g')
          BRANCH_NAME="update-image-${TAG_SAFE}-${TIMESTAMP}"
          echo "Creating new branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          echo "::endgroup::"

          echo "::group::Git Status and Changes"
          git status
          git add config/helm/*.yaml

          COMMIT_MSG=$(cat << 'EOF'
          chore: update image tags for ${{ steps.vars.outputs.env }} environment

          From:
          - backend: ${{ steps.update_helm.outputs.old_backend_tag }}
          - frontend: ${{ steps.update_helm.outputs.old_frontend_tag }}

          To:
          - backend: ${{ steps.update_helm.outputs.deploy_tag }}
          - frontend: ${{ steps.update_helm.outputs.deploy_tag }}

          Environment: ${{ steps.vars.outputs.env }}
          Original Tag: ${{ steps.vars.outputs.tag }}
          EOF
          )

          if git commit -m "$COMMIT_MSG"; then
            echo "✅ Changes committed successfully"
            if git push origin "$BRANCH_NAME"; then
              echo "✅ Changes pushed successfully"
              echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
              echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "::error::Failed to push changes to remote"
              exit 1
            fi
          else
            echo "No changes to commit. Possible reasons:"
            echo "1. Tags were already up to date"
            echo "2. No modifications were made to the files"
            git status
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      - name: Create Pull Request
        if: steps.commit.outputs.has_changes == 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.MACHINE_USER_TOKEN }}
          commit-message: "chore: update image tags for ${{ steps.vars.outputs.env }} environment"
          branch: ${{ steps.commit.outputs.branch_name }}
          base: ${{ steps.commit.outputs.default_branch }}
          title: "Update image tags to ${{ steps.update_helm.outputs.deploy_tag }} for ${{ steps.vars.outputs.env }}"
          body: |
            ## Changes Summary
            This PR updates the image tags in the Helm values files for the **${{ steps.vars.outputs.env }}** environment.

            ### Tag Updates
            **From:**
            - Backend: `${{ steps.update_helm.outputs.old_backend_tag }}`
            - Frontend: `${{ steps.update_helm.outputs.old_frontend_tag }}`

            **To:**
            - Backend: `${{ steps.update_helm.outputs.deploy_tag }}`
            - Frontend: `${{ steps.update_helm.outputs.deploy_tag }}`

            **Original Tag:** `${{ steps.vars.outputs.tag }}`

            ### Additional Information
            - Environment: `${{ steps.vars.outputs.env }}`
            - Triggered by: `${{ github.event_name }}`
            - Workflow run: [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            This PR was automatically created by the update-helm workflow.
          labels: |
            automated-pr
            helm-update
            env/${{ steps.vars.outputs.env }}
          delete-branch: true

      - name: Auto-merge Pull Request
        if: steps.create_pr.outputs.pull-request-number
        run: |
          PR_NUMBER=${{ steps.create_pr.outputs.pull-request-number }}
          echo "Created PR #${PR_NUMBER}"

          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

          # Authenticate with GitHub CLI
          echo "${{ secrets.MACHINE_USER_TOKEN }}" | gh auth login --with-token

          # Enable auto-merge for the PR
          echo "Enabling auto-merge for PR #${PR_NUMBER}"
          gh pr merge ${PR_NUMBER} --auto --merge

          echo "Auto-merge enabled for PR #${PR_NUMBER}"

      - name: Create GitHub Release (if not triggered by release)
        if: ${{ github.event_name != 'release' }}
        run: |
          # Use gh CLI to create a release
          echo "Creating GitHub release for tag ${{ steps.process-tag.outputs.tag_name }}..."

          # Authenticate with GitHub CLI
          echo "${{ secrets.MACHINE_USER_TOKEN }}" | gh auth login --with-token

          # Create release notes file
          cat > release_notes.md << EOF
          ## Helm Chart Update

          This release updates the Helm charts for the **${{ steps.vars.outputs.env }}** environment.

          ### Version Information
          - Environment: ${{ steps.vars.outputs.env }}
          - Helm Chart Version: ${{ steps.process-tag.outputs.version }}
          - Image Tag: ${{ steps.process-tag.outputs.deploy_tag }}
          - Git Hash: ${{ steps.process-tag.outputs.git_hash }}

          ### Changes
          Updated image tags in Helm values from:
          - Backend: \`${{ steps.update_helm.outputs.old_backend_tag }}\`
          - Frontend: \`${{ steps.update_helm.outputs.old_frontend_tag }}\`

          To:
          - Backend: \`${{ steps.update_helm.outputs.deploy_tag }}\`
          - Frontend: \`${{ steps.update_helm.outputs.deploy_tag }}\`
          EOF

          # Check if release already exists
          if gh release view "${{ steps.process-tag.outputs.tag_name }}" &>/dev/null; then
            echo "Release ${{ steps.process-tag.outputs.tag_name }} already exists, updating it..."
            # Update existing release
            if gh release edit "${{ steps.process-tag.outputs.tag_name }}" \
              --title "Release ${{ steps.process-tag.outputs.tag_name }}" \
              --notes-file release_notes.md \
              ${{ steps.vars.outputs.env == 'staging' && '--prerelease' || '' }}; then
              echo "✅ GitHub release updated successfully!"
            else
              echo "::warning::Failed to update release, but continuing workflow"
            fi
          else
            # Create new release
            if gh release create "${{ steps.process-tag.outputs.tag_name }}" \
              --title "Release ${{ steps.process-tag.outputs.tag_name }}" \
              --notes-file release_notes.md \
              --generate-notes \
              ${{ steps.vars.outputs.env == 'staging' && '--prerelease' || '' }}; then
              echo "✅ GitHub release created successfully!"
            else
              echo "::warning::Failed to create release, but continuing workflow"
            fi
          fi
