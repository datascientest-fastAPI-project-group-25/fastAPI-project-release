
on:
  release:
    types: [published] # Trigger only when a release is published

jobs:
  update-helm:
    runs-on: ubuntu-latest
    env:
      GIT_AUTHOR_NAME: github-actions
      GIT_AUTHOR_EMAIL: github-actions@github.com
      GIT_COMMITTER_NAME: github-actions
      GIT_COMMITTER_EMAIL: github-actions@github.com
      GH_TOKEN: ${{ secrets.MACHINE_USER_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MACHINE_USER_TOKEN }}
          fetch-depth: 0 # Fetch all history for proper branch detection
          clean: false # Preserve workspace changes
          persist-credentials: true # Ensure credentials are available for push
          set-safe-directory: true # Mark the repository directory as safe

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Make scripts executable
        run: chmod +x ./scripts/generate_commit_message.sh ./scripts/generate_pr_body.sh ./scripts/get_release_vars.sh ./scripts/update_helm_values.sh ./scripts/commit_changes.sh

      - name: Debug Event Information
        run: |
          echo "Event name: ${{ github.event_name }}" # Should always be 'release'
          echo "Event action: ${{ github.event.action }}" # Should always be 'published'
          echo "Release tag: ${{ github.event.release.tag_name }}"
          echo "Release name: ${{ github.event.release.name }}"
          echo "Release draft: ${{ github.event.release.draft }}"
          echo "Release prerelease: ${{ github.event.release.prerelease }}"

      - name: Determine tag and environment from Release
        id: vars
        run: |
          ./scripts/get_release_vars.sh "${{ github.event.release.tag_name }}" "${{ github.event.release.prerelease }}"

      - name: Update Helm values with new image tag (Idempotent)
        id: update_helm
        env: # Pass outputs as environment variables
          ENV: ${{ steps.vars.outputs.env }}
          DEPLOY_TAG: ${{ steps.vars.outputs.deploy_tag }}
          SEMANTIC_VERSION: ${{ steps.vars.outputs.semantic_version }}
        run: ./scripts/update_helm_values.sh

      - name: Commit changes
        id: commit
        if: steps.update_helm.outputs.updated == 'true'
        env:
          ENV: ${{ steps.vars.outputs.env }}
          DEPLOY_TAG: ${{ steps.update_helm.outputs.deploy_tag }}
          RAW_VERSION: ${{ steps.vars.outputs.raw_version }}
          OLD_BACKEND_TAG: ${{ steps.update_helm.outputs.old_backend_tag }}
          OLD_FRONTEND_TAG: ${{ steps.update_helm.outputs.old_frontend_tag }}
          SEMANTIC_VERSION: ${{ steps.vars.outputs.semantic_version }}
          GITHUB_TOKEN: ${{ secrets.MACHINE_USER_TOKEN }}
        run: ./scripts/commit_changes.sh

      - name: Wait for PR Checks and Merge
        if: steps.commit.outputs.pr_number
        env:
          PR_NUMBER: ${{ steps.commit.outputs.pr_number }}
          GH_TOKEN: ${{ secrets.MACHINE_USER_TOKEN }}
        run: |
          echo "Waiting for checks on PR #${PR_NUMBER}..."
          if ! gh pr checks $PR_NUMBER --watch --required --interval 30; then
            echo "::error::Required checks failed or timed out for PR #${PR_NUMBER}."
            exit 1
          fi
          echo "All required checks passed for PR #${PR_NUMBER}."
          echo "Attempting to merge PR #${PR_NUMBER}..."
          gh pr merge $PR_NUMBER --squash --delete-branch
          echo "PR #${PR_NUMBER} merged successfully."
