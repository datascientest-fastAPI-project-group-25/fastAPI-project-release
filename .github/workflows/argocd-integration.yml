name: ArgoCD Integration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (playground, staging, production)'
        required: true
        default: 'playground'
        type: choice
        options:
          - playground
          - staging
          - production
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

jobs:
  setup-argocd:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd
          argocd version --client

      - name: Login to ArgoCD
        run: |
          argocd login --insecure --server ${{ secrets.ARGOCD_SERVER }} --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }}
          echo "Successfully logged in to ArgoCD server at ${{ secrets.ARGOCD_SERVER }}"

      - name: Deploy with ArgoCD
        run: |
          # Set environment-specific variables
          if [ "${{ github.event.inputs.environment }}" == "playground" ]; then
            APP_NAME="fastapi-playground"
            NAMESPACE="fastapi-helm-playground"
            VALUES_FILE="config/helm/playground.yaml"
          elif [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            APP_NAME="fastapi-staging"
            NAMESPACE="fastapi-helm-staging"
            VALUES_FILE="config/helm/staging.yaml"
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            APP_NAME="fastapi-prod"
            NAMESPACE="fastapi-helm-prod"
            VALUES_FILE="config/helm/production.yaml"
          else
            echo "Invalid environment: ${{ github.event.inputs.environment }}"
            exit 1
          fi

          # Check if application exists
          if argocd app get $APP_NAME &> /dev/null; then
            echo "Updating existing application $APP_NAME..."
            argocd app set $APP_NAME \
              --revision ${{ github.event.inputs.branch }} \
              --values $VALUES_FILE
          else
            echo "Creating new application $APP_NAME..."
            argocd app create $APP_NAME \
              --repo https://github.com/datascientest-fastapi-project-group-25/fastAPI-project-release.git \
              --path charts/fastapi \
              --revision ${{ github.event.inputs.branch }} \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace $NAMESPACE \
              --values $VALUES_FILE \
              --sync-policy automated \
              --auto-prune \
              --self-heal
          fi

          # Trigger sync
          echo "Triggering sync for $APP_NAME..."
          argocd app sync $APP_NAME --prune

          # Wait for sync to complete
          echo "Waiting for sync to complete..."
          argocd app wait $APP_NAME --health --timeout 300

          # Get application status
          echo "Application status:"
          argocd app get $APP_NAME

      - name: Deployment Summary
        run: |
          echo "Deployment to ${{ github.event.inputs.environment }} environment complete!"
          echo "Branch: ${{ github.event.inputs.branch }}"

          if [ "${{ github.event.inputs.environment }}" == "playground" ]; then
            echo "URL: https://playground.example.com"
          elif [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "URL: https://staging.example.com"
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "URL: https://example.com"
          fi
