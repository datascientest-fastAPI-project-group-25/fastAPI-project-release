name: ArgoCD Integration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (staging, production)'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

jobs:
  setup-argocd:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker tools image
        run: docker build -t fastapi-tools .

      - name: Install ArgoCD CLI and Login
        run: |
          # Create a script to install ArgoCD CLI and login
          cat > argocd-login.sh << 'EOF'
          #!/bin/bash
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          mv argocd-linux-amd64 /usr/local/bin/argocd
          argocd version --client
          argocd login --insecure --server $ARGOCD_SERVER --auth-token $ARGOCD_AUTH_TOKEN
          echo "Successfully logged in to ArgoCD server at $ARGOCD_SERVER"
          EOF
          chmod +x argocd-login.sh

          # Run the script in the container
          docker run --rm -v $(pwd):/app -w /app \
            -e ARGOCD_SERVER=${{ secrets.ARGOCD_SERVER }} \
            -e ARGOCD_AUTH_TOKEN=${{ secrets.ARGOCD_AUTH_TOKEN }} \
            fastapi-tools ./argocd-login.sh

      - name: Deploy with ArgoCD
        run: |
          # Create a deployment script
          cat > argocd-deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          # Set environment-specific variables
          if [ "$ENVIRONMENT" == "staging" ]; then
            APP_NAME="fastapi-staging"
            NAMESPACE="fastapi-helm-staging"
            VALUES_FILE="config/helm/staging.yaml"
          elif [ "$ENVIRONMENT" == "production" ]; then
            APP_NAME="fastapi-prod"
            NAMESPACE="fastapi-helm-prod"
            VALUES_FILE="config/helm/production.yaml"
          else
            echo "Invalid environment: $ENVIRONMENT"
            exit 1
          fi

          # Check if application exists
          if argocd app get $APP_NAME &> /dev/null; then
            echo "Updating existing application $APP_NAME..."
            argocd app set $APP_NAME \
              --revision $BRANCH \
              --values $VALUES_FILE
          else
            echo "Creating new application $APP_NAME..."
            argocd app create $APP_NAME \
              --repo https://github.com/datascientest-fastapi-project-group-25/fastAPI-project-release.git \
              --path charts/fastapi \
              --revision $BRANCH \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace $NAMESPACE \
              --values $VALUES_FILE \
              --sync-policy automated \
              --auto-prune \
              --self-heal
          fi

          # Trigger sync
          echo "Triggering sync for $APP_NAME..."
          argocd app sync $APP_NAME --prune

          # Wait for sync to complete
          echo "Waiting for sync to complete..."
          argocd app wait $APP_NAME --health --timeout 300

          # Get application status
          echo "Application status:"
          argocd app get $APP_NAME
          EOF
          chmod +x argocd-deploy.sh

          # Run the script in the container
          docker run --rm -v $(pwd):/app -w /app \
            -e ARGOCD_SERVER=${{ secrets.ARGOCD_SERVER }} \
            -e ARGOCD_AUTH_TOKEN=${{ secrets.ARGOCD_AUTH_TOKEN }} \
            -e ENVIRONMENT=${{ github.event.inputs.environment }} \
            -e BRANCH=${{ github.event.inputs.branch }} \
            fastapi-tools ./argocd-deploy.sh

      - name: Deployment Summary
        run: |
          echo "Deployment to ${{ github.event.inputs.environment }} environment complete!"
          echo "Branch: ${{ github.event.inputs.branch }}"

          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "URL: https://staging.example.com"
          elif [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "URL: https://example.com"
          fi
