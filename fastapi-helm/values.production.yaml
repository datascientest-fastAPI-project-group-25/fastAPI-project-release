# Values for production environment
app:
  name: fastapi-app
  namespace: fastapi-helm-prod

# Backend configuration
backend:
  name: backend
  image: ghcr.io/your-org/fastapi-project-app/backend  # Replace with your actual image repository
  tag: production-latest  # This will be updated by the CI pipeline
  replicas: 2  # Higher replica count for production
  port: 8000
  service:
    name: backend-service
    port: 8000
    type: ClusterIP

# Frontend configuration
frontend:
  name: frontend
  image: ghcr.io/your-org/fastapi-project-app/frontend  # Replace with your actual image repository
  tag: production-latest  # This will be updated by the CI pipeline
  replicas: 2  # Higher replica count for production
  port: 80
  service:
    name: frontend-service
    port: 80
    type: ClusterIP

# Database configuration
database:
  name: postgres
  image: postgres
  tag: 12
  storage:
    size: 10Gi  # Larger storage for production
  credentials:
    username: postgres
    password: postgres  # In production, use a secret manager
    database: postgres
  service:
    name: postgres
    port: 5432

# Ingress configuration
ingress:
  enabled: true
  host: dashboard.example.com  # Replace with your actual production domain
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod

# ConfigMap values
configMap:
  databaseUrl: postgresql://postgres:postgres@postgres:5432/postgres
  allowedOrigins: https://dashboard.example.com  # Replace with your actual production domain
  corsSettings: true
  debugMode: false  # Disable debug mode in production
  secretKey: production-secret-key  # In production, use a secret manager

resources:
  limits:
    cpu: 1000m
    memory: 1024Mi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70

securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

podSecurityContext:
  runAsNonRoot: true

# Additional production-specific settings
livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

# Network policies for production
networkPolicies:
  enabled: true
  ingressRules:
    - from:
        - podSelector:
            matchLabels:
              app: ingress-controller
  egressRules:
    - to:
        - podSelector:
            matchLabels:
              app: postgres